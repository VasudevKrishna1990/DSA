    string findLCS(string s1,string s2){
        int n = s1.length();
        int m = s2.length();
        vector<vector<int>>t(n+1,vector<int>(m+1,0));
        for(int i =0;i<n+1;i++){
            for(int j =0;j<m+1;j++){
                if(i ==0 || j == 0)
                    continue;
                else
                {
                    if(s1[i-1] == s2[j-1]){
                        t[i][j] = 1+t[i-1][j-1];
                    }
                    else
                    {
                        t[i][j] = max(t[i-1][j] ,t[i][j-1]);
                    }
                }
            }
        }
        
        int i = n;
        int j = m;
        string lcs;
        while(i>0 && j>0){
            if(s1[i-1] == s2[j-1])
            {
                lcs.push_back(s1[i-1]);
                i-=1;
                j-=1;
            }
            else{
                if(t[i-1][j] > t[i][j-1])
                    i-=1;
                else
                    j-=1;
            }
        }
        reverse(lcs.begin(),lcs.end());
        return lcs;
    }
    
    string computeSCSS(string s1,string s2,string lcs){
        string scss;
        if(lcs.length() == 0)
            return s1+s2;
        else{
            int i = 0;
            int j = 0;
            int k = 0;
            while(k<lcs.length()){
                
                while(s1[i]!= lcs[k]){
                    scss.push_back(s1[i]);
                    i+=1;
                }
                
                while(s2[j]!= lcs[k]){
                    scss.push_back(s2[j]);
                    j+=1;
                }
                
                scss.push_back(lcs[k]);
                k+=1;
                i+=1;
                j+=1;
            }
            
            while(i<s1.length()){
                scss.push_back(s1[i]);
                i+=1;
            }
                
            while(j<s2.length()){
                scss.push_back(s2[j]);
                j+=1;
            }
        }
        return scss;
    }
    string shortestCommonSupersequence(string str1, string str2) {
        string lcs = findLCS(str1,str2);   
        return computeSCSS(str1,str2,lcs);
    }
