/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <iostream>
#include<vector>
#include<cstring>
using namespace std;

int dp[1001][1001];
int solve(vector<int>&len,int N,int L){
    if(N == 0 || L == 0)
        return 1;
    if(dp[N][L] != -1)
        return dp[N][L];
    if(L >= len[N-1]){
        return dp[N][L] = max(solve(len,N-1,L),len[N-1] * solve(len,N,L-len[N-1]));
    }
    return dp[N][L] = solve(len,N-1,L);
}

int solveTab(vector<int>&len,int N,int L){
    vector<vector<int>>t(N+1,vector<int>(L+1,0));
    for(int i =0;i<N+1;i++){
        for(int j =0;j<L+1;j++){
            if(i == 0 || j == 0){
                t[i][j] = 1;
            }
            else
            {
                if(j >= len[i-1]){
                    t[i][j] = max(t[i-1][j] ,len[i-1] * t[i][j-len[i-1]]);
                }
                else{
                    t[i][j] = t[i-1][j];
                }
            }
        }
    }
    return t[N][L];
}


int maxProduct(int n){
    vector<int>len(n);
    len.clear();
    for(int i =0;i<n-1;i++){
        len.push_back(i+1);    
    }
    //return solve(len,n-1,n);
    return solveTab(len,n-1,n);
}

int main()
{
    memset(dp,-1,sizeof(dp));
    int N = 15;
    if(N < 0)
        return 0;
    if(N < 2)
        return N;
    cout<<maxProduct(N);

    return 0;
}
